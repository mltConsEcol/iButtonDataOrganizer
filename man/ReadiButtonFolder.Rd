% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MainFunctions.R
\name{ReadiButtonFolder}
\alias{ReadiButtonFolder}
\title{Read Temperature Data Files from Folder}
\usage{
ReadiButtonFolder(path = path, rounding = rounding, StartDate, EndDate,
  DailyStartTime, DailyEndTime, exceltime = FALSE, hdlen = 14)
}
\arguments{
\item{path}{Desired folder}

\item{rounding}{Desired Rounding (options: '1min', '10min', '15min', '30min', '1hr', '2hrs')}

\item{StartDate}{First desired date (and time) of the dataset (in format 'YYYY-MM-DD' or 'YYY-MM-DD HH:MM:SS' (in 24 hour time))}

\item{EndDate}{Last desired date (and time) of the dataset (in format 'YYYY-MM-DD' or 'YYY-MM-DD HH:MM:SS' (in 24 hour time))}

\item{DailyStartTime}{If only a portion of the day is desired, the start daily start time (in format 'HH:MM:SS' (in 24 hour time))}

\item{DailyEndTime}{If only a portion of the day is desired, the start daily end time (in format 'HH:MM:SS' (in 24 hour time))}

\item{exceltime}{Indicates whether function should read the date and time stamp as formatted when an iButton file is saved in Microsoft Excel, as it changes the format. Default is FALSE.}

\item{hdlen}{Specifies the length of the header, as not all iButton data files have same header length. For example, model DS1921G has a header of 14 lines (which is the default for the function), while DS1922L has a header of 19 lines. This can be determined by opening an iButton data file in a text editor and counting how many lines are before the column names for the data.}
}
\value{
zoo object.
}
\description{
Imports all iButton temperature data from a specified folder, and aligns them to desired specifications based on rounding and start/end dates and times.
}
\examples{
    packagePath <- find.package("iButtonDataOrganizer", lib.loc=NULL, quiet = TRUE)
    pathToFolder <- paste(packagePath, "/extdata/iButtonData_JulOct2014_2hr", sep="")

    # Note: Time can also be included as part of the date, in this example, only date is used;
    # Date/Time formatted as "YYYY-MM-DD HH-MM-SS", based on 24 hour time
    JulOct2014 <- ReadiButtonFolder(path=pathToFolder, rounding="2hrs",
     StartDate="2014-07-26", EndDate="2014-10-31")

    ## Users can write output to CSV file a CSV file with Date in the first column:
    # write.csv(as.data.frame(JulOct2014), "JulOct2014.csv")
}
\author{
Mike Treglia \email{mtreglia@gmail.com}
}

